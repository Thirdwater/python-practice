"""A solution to project euler problem 2
https://projecteuler.net/problem=2

Each new term in the Fibonacci sequence is generated by adding the previous two
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.

Answer: 4,613,732
"""

def naive_solution():
    last_2 = 1
    last_1 = 2
    sum_of_even_terms = last_1
    term = 3
    while term < 4000000:
        if term % 2 == 0:
            sum_of_even_terms += term

        last_2 = last_1
        last_1 = term
        term = last_2 + last_1

    return sum_of_even_terms


def even_fibonacci_solution():
    """Enumerate even fibonacci terms directly

    Let f(n) be the nth fibonacci number.

    1. We first show that for all positive integer n, f(3n - 1) is the nth even
       fibonacci number.

        Note: f(1) = 1 is odd
              f(2) = 2 is even
        
        So for n = 1, f(3n - 1) = f(3(1) - 1) = f(2) = 2 is the first even
        fibonacci number.

        Let P(n): f(3n - 2) is odd and f(3n - 1) is even.

        Then P(1) is true since f(3(1) - 2) = f(1) is odd,
        and f(3(1) - 1) = f(2) is even.

        Assume for some positive integer k >= 1 that P(k) is true.
        Then f(3k - 2) is odd and f(3k - 1) is even.
        So  f(3k) = f(3k - 2) + f(3k - 1) is odd,
        f(3k + 1) = f(3k - 1) + f(3k)     is odd, and
        f(3k + 2) = f(3k)     + f(3k + 1) is even.

        Now f(3k + 1) = f(3k + 3 - 2) = f(3(k + 1) - 2) is odd,
        and f(3k + 2) = f(3k + 3 - 1) = f(3(k + 1) - 1) is even.
        So P(k) implies P(k + 1).

        So for all n >= 1, f(3n - 2) is odd and f(3n - 1) is even.

        Now    f(3n) = f(3n - 2) + f(3n - 1) is odd.
        So f(3n + 1) = f(3n - 1) + f(3n)     is odd.
        So f(3n + 2) = f(3n)     + f(3n - 1) is even.
        Note f(3n + 2) = f(3n + 3 - 1) = f(3(n + 1) - 1)

        So for all n, f(3n - 1) is an even fibonacci number implies that
        f(3(n + 1) - 1) is the next even fibonacci number.
        Since f(3(1) - 1) is the first even fibonacci number,
        f(3n - 1) is the nth even fibonacci number.

    2. Then we enumerate all the even fibonacci numbers directly.

        Let e(n) = f(3n - 1) be the nth even fibonacci number.

        We will show that this can be written in terms of e(n - 1) and e(n - 2).
        Note:
            e(n - 1) = f(3(n - 1) - 1)
                     = f(3n - 4)

        and e(n - 2) = f(3(n - 2) - 1)
                     = f(3n - 7)
        
        Now f(3n - 1) =           f(3n - 3)        +      f(3n - 2)
                      =      f(3n - 5) + f(3n - 4) + f(3n - 4) + f(3n - 3)
                      = f(3n - 7) + f(3n - 6) + 2f(3n -4) + f(3n - 5) + f(3n - 4)
                      = f(3n - 7) + 4f(3n - 4)
                      = e(n - 2) + 4e(n - 1)
    """
    # 1, <2>, 3, 5, <8>, 13, 21, <34>
    last_even_2 = 2
    last_even_1 = 8
    sum_of_even_terms = 10
    even_term = 34
    while even_term < 4000000:
        sum_of_even_terms += even_term

        last_even_2 = last_even_1
        last_even_1 = even_term
        even_term = last_even_2 + (4 * last_even_1)

    return sum_of_even_terms


if __name__ == '__main__':
    print(naive_solution())
    print(even_fibonacci_solution())
